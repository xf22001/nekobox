name: Build and Upload Artifacts (Dockerized)

on:
  workflow_dispatch:
    inputs:
      os:
        description: 'Select OS for Docker Build Environment'
        required: true
        default: '20.04'
        type: choice
        options:
          - 20.04
          - 22.04
          - 24.04
          - latest

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ^1.25.1

      - name: Clone sing-box repository
        run: |
          git clone --branch module https://github.com/xf22001/sing-box.git sing-box

      - name: Set environment variables
        run: |
          echo "DEPLOYMENT=$(pwd)/build" >> $GITHUB_ENV
          echo "DOCKER_DEPLOYMENT=/app/build" >> $GITHUB_ENV
          echo "GOOS=linux" >> $GITHUB_ENV
          echo "GOARCH=${{ matrix.arch }}" >> $GITHUB_ENV

          echo "TAGS=with_gvisor,with_quic,with_dhcp,with_wireguard,with_utls,with_acme,with_clash_api,with_v2ray_api,with_tailscale" >> $GITHUB_ENV

          pushd sing-box
          echo "GOHOSTOS=$(go env GOHOSTOS)" >> $GITHUB_ENV
          echo "GOHOSTARCH=$(go env GOHOSTARCH)" >> $GITHUB_ENV
          echo "VERSION=$(CGO_ENABLED=0 GOOS=$(go env GOHOSTOS) GOARCH=$(go env GOHOSTARCH) go run ./cmd/internal/read_tag)" >> $GITHUB_ENV
          popd

      - name: Build the project (in Docker)
        run: |
          DOCKER_IMAGE="ubuntu:${{ github.event.inputs.os }}"

          if [ "$GOARCH" == "amd64" ]; then
              DEST="$DEPLOYMENT/linux64"
              DOCKER_DEST="$DOCKER_DEPLOYMENT/linux64"
          elif [ "$GOARCH" == "arm64" ]; then
              DEST="$DEPLOYMENT/linux-arm64"
              DOCKER_DEST="$DOCKER_DEPLOYMENT/linux-arm64"
          fi

          if [ -z "$DEST" ]; then
              echo "Please set GOOS and GOARCH"
              exit 1
          fi

          mkdir -p "$DEST"

          docker run --rm \
            -v ${{ github.workspace }}:/app \
            -w /app/cmd/nekobox_core \
            -e GOOS=$GOOS \
            -e GOARCH=$GOARCH \
            -e VERSION=$VERSION \
            -e TAGS="$TAGS" \
            -e DEST="$DOCKER_DEST" \
            $DOCKER_IMAGE \
            /bin/bash -c "
              apt-get update && apt-get install -y wget curl gnupg
              wget https://go.dev/dl/go1.25.1.linux-amd64.tar.gz
              tar -C /usr/local -xzf go1.25.1.linux-amd64.tar.gz
              export PATH=\$PATH:/usr/local/go/bin
              go version

              # --- Debugging: Print Environment Variables ---
              echo \"--- Environment Variables in Docker --- \"
              env
              echo \"--- End of Environment Variables --- \"

              # --- Debugging: Print the go build command ---
              BUILD_COMMAND=\"go build -v -o \$DEST -trimpath -ldflags '-w -s -X github.com/sagernet/sing-box/constant.Version=\$VERSION' -tags '\$TAGS'\"
              echo \"--- Go Build Command: --- \"
              echo \"\$BUILD_COMMAND\"
              echo \"--- End of Go Build Command --- \"

              eval \$BUILD_COMMAND # Execute the go build command using eval

              rm go1.25.1.linux-amd64.tar.gz && apt-get autoremove -y && apt-get clean
            "

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ github.event.inputs.os }}-${{ matrix.arch }}
          path: ${{ env.DEPLOYMENT }}
